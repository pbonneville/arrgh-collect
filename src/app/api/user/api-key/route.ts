import { NextRequest, NextResponse } from 'next/server';
import { getSession, hasPermission } from '@/lib/auth';
import { createClient } from '@/lib/supabase/server';
import { generateApiKey } from '@/lib/api-auth';
import { ApiResponse } from '@/types';

export async function GET() {
  try {
    // Check authentication
    const session = await getSession();
    if (!session || !session.user) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Check read permissions
    const hasReadPermission = await hasPermission('read');
    if (!hasReadPermission) {
      return NextResponse.json(
        { success: false, error: 'Insufficient permissions' },
        { status: 403 }
      );
    }

    const supabase = await createClient();
    
    // Get user's API key from the user_api_keys table
    const { data: apiKeys, error } = await supabase
      .from('user_api_keys')
      .select('apiKey, createdAt, id, label')
      .eq('userId', session.user.id)
      .order('createdAt', { ascending: false })
      .limit(1);

    if (error) {
      console.error('Error fetching API key:', error);
      return NextResponse.json(
        { success: false, error: 'Failed to fetch API key' },
        { status: 500 }
      );
    }

    if (!apiKeys || apiKeys.length === 0) {
      return NextResponse.json(
        { success: false, error: 'No API key found. Please generate an API key first.' },
        { status: 404 }
      );
    }

    const apiKey = apiKeys[0];
    const response: ApiResponse = {
      success: true,
      data: {
        id: apiKey.id,
        api_key: apiKey.apiKey,
        api_key_created_at: apiKey.createdAt,
        created_at: apiKey.createdAt,
      },
      message: 'API key retrieved successfully',
    };

    return NextResponse.json(response);
  } catch (error) {
    console.error('Error getting API key:', error);
    const response: ApiResponse = {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to get API key',
    };
    return NextResponse.json(response, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  try {
    // Check authentication
    const session = await getSession();
    if (!session || !session.user) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Check write permissions
    const hasWritePermission = await hasPermission('write');
    if (!hasWritePermission) {
      return NextResponse.json(
        { success: false, error: 'Insufficient permissions' },
        { status: 403 }
      );
    }

    // Parse request body for regeneration confirmation
    const body = await request.json().catch(() => ({}));
    const { regenerate } = body;

    const supabase = await createClient();
    const newApiKey = generateApiKey();
    
    // Check if user already has API keys
    const { data: existingKeys, error: keysError } = await supabase
      .from('user_api_keys')
      .select('id, apiKey')
      .eq('userId', session.user.id)
      .order('createdAt', { ascending: false })
      .limit(1);

    console.log('Existing keys check:', { existingKeys, keysError });
    console.log('User ID:', session.user.id);

    let result;
    if (existingKeys && existingKeys.length > 0) {
      // User already has an API key - require regeneration flag
      if (!regenerate) {
        return NextResponse.json(
          { success: false, error: 'API key already exists. Set regenerate: true to create a new one.' },
          { status: 409 }
        );
      }
      
      // Update existing API key
      result = await supabase
        .from('user_api_keys')
        .update({
          apiKey: newApiKey,
          updatedAt: new Date().toISOString(),
        })
        .eq('id', existingKeys[0].id)
        .select('id, apiKey, createdAt, label')
        .single();
    } else {
      // Create new API key (id will be auto-generated by database)
      result = await supabase
        .from('user_api_keys')
        .insert({
          userId: session.user.id,
          apiKey: newApiKey,
          label: 'Default API Key',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        })
        .select('id, apiKey, createdAt, label')
        .single();
    }

    const { data: apiKeyData, error } = result;

    if (error) {
      console.error('Error creating/updating API key:', error);
      console.error('Error details:', JSON.stringify(error, null, 2));
      return NextResponse.json(
        { success: false, error: `Failed to generate API key: ${error.message || error.code || 'Unknown error'}` },
        { status: 500 }
      );
    }

    const response: ApiResponse = {
      success: true,
      data: {
        id: apiKeyData.id,
        api_key: apiKeyData.apiKey,
        api_key_created_at: apiKeyData.createdAt,
        created_at: apiKeyData.createdAt,
      },
      message: (existingKeys && existingKeys.length > 0) ? 'API key regenerated successfully' : 'API key created successfully',
    };

    return NextResponse.json(response, { status: (existingKeys && existingKeys.length > 0) ? 200 : 201 });
  } catch (error) {
    console.error('Error generating API key:', error);
    const response: ApiResponse = {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to generate API key',
    };
    return NextResponse.json(response, { status: 500 });
  }
}